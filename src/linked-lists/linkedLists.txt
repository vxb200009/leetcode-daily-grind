class LinkedList{
     // has cycle  - with hashSet
     public boolean hasCycle(ListNode head) {
        Set<ListNode> nodesSeen = new HashSet<>();
        ListNode current = head;
        while (current != null) {
            if (nodesSeen.contains(current)) {
                return true;
            }
            nodesSeen.add(current);
            current = current.next;
        }
        return false;
    }
    // Has cycle - with no additional space - with two nodes
    public boolean hasCycle(ListNode head) {
        if(head == null)
            return false;

        ListNode slowRunner = head;
        ListNode fastRunner = head.next;

        while(fastRunner!=null && fastRunner.next!=null){
            if(fastRunner == slowRunner)
                return true;
            slowRunner = slowRunner.next;
            fastRunner = fastRunner.next.next;
        }
        return false; 
    }

    // Add two numbers through linked list
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode curr = dummyHead;
        int carry = 0;

        while(l1!=null||l2!=null||carry!=0){
            int x = l1!=null ? l1.val : 0;
            int y = l2!=null ? l2.val : 0;
            int sum = x+y+carry;
            carry = sum / 10;
            curr.next = new ListNode(sum%10);
            curr = curr.next;
            if(l1!=null) l1 = l1.next;
            if(l2!=null) l2 = l2.next;
        }

        return dummyHead.next;
        
    }

    // merge two lists in sorted way
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummyHead = new ListNode(0);
        ListNode curr = dummyHead;

        if(list1==null && list2==null)
            return dummyHead.next;

        while(list1!=null && list2!=null){
            int x = list1.val; 
            int y =  list2.val;

            if(x<=y){
                curr.next = new ListNode(x);
                curr = curr.next;
                list1 = list1.next;
            }
            else{
                curr.next = new ListNode(y);
                curr = curr.next;
                list2 = list2.next;
            }

        }
        curr.next = list1==null? list2 : list1;
        return dummyHead.next;
    }

    deepCopy of the linkedList
    public Node copyRandomList(Node head) {
        if (head == null) return null;

        // Step 1: Create a mapping from original node â†’ copied node
        HashMap<Node, Node> map = new HashMap<>();

        Node curr = head;

        // First pass: create all nodes (without wiring next/random)
        while (curr != null) {
            map.put(curr, new Node(curr.val));
            curr = curr.next;
        }

        // Second pass: assign next and random pointers
        curr = head;
        while (curr != null) {
            Node copyNode = map.get(curr);
            copyNode.next = map.get(curr.next);  // next may be null, it's okay
            copyNode.random = map.get(curr.random);   // same here
            curr = curr.next;
        }

        return map.get(head);
    }

    // reverse the list not just the numbers
    public ListNode reverseBetween(ListNode head, int m, int n) {
        // Empty list
        if (head == null) {
            return null;
        }

        // Move the two pointers until they reach the proper starting point
        // in the list.
        ListNode cur = head, prev = null;
        while (m > 1) {
            prev = cur;
            cur = cur.next;
            m--;
            n--;
        }

        // The two pointers that will fix the final connections.
        ListNode con = prev, tail = cur;

        // Iteratively reverse the nodes until n becomes 0.
        ListNode third = null;
        while (n > 0) {
            third = cur.next;
            cur.next = prev;
            prev = cur;
            cur = third;
            n--;
        }

        // Adjust the final connections as explained in the algorithm
        if (con != null) {
            con.next = prev;
        } else {
            head = prev;
        }

        tail.next = cur;
        return head;
    }
}


class SolutionBINARYTREES {

    // max depth using dfs
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        else{
            int left_height = maxDepth(root.left);
            int right_height = maxDepth(root.right);
            return Math.max(left_height,right_height)+1;
        }
        
    }
    // Using BFS and queue  - max depth
    private Queue<SimpleEntry<TreeNode,Integer>> next_nodes = new LinkedList<>();
    private int max_depth = 0;
    private int nextMaxDepth(){
        if(next_nodes.isEmpty()){
            return max_depth;
        }
        SimpleEntry<TreeNode,Integer> next_item = next_nodes.poll();
        TreeNode next_node = next_item.getKey();
        max_depth = Math.max(max_depth,next_item.getValue()+1);
        if(next_node.left!=null){
            next_nodes.add(new SimpleEntry<>(next_node.left,next_item.getValue()+1));
        }
        if(next_node.right!=null){
            next_nodes.add(new SimpleEntry<>(next_node.right,next_item.getValue()+1));
        }
        return nextMaxDepth();
    }
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        next_nodes.clear();
        max_depth = 0;
        next_nodes.add(new SimpleEntry<>(root,0));
        return nextMaxDepth();
    }
    //using dfs with iteration - max depth
    public int maxDepth(TreeNode root) {
        LinkedList<TreeNode> stack = new LinkedList<>();
        LinkedList<Integer> depths = new LinkedList<>();
        if (root == null) return 0;

        stack.add(root);
        depths.add(1);

        int depth = 0, current_depth = 0;
        while (!stack.isEmpty()) {
            root = stack.pollLast();
            current_depth = depths.pollLast();
            if (root != null) {
                depth = Math.max(depth, current_depth);
                stack.add(root.left);
                stack.add(root.right);
                depths.add(current_depth + 1);
                depths.add(current_depth + 1);
            }
        }
        return depth;
    }

    // using stack dfs
    public boolean isSameTree(TreeNode p, TreeNode q) {
        LinkedList<Pair<TreeNode,TreeNode>> stack = new LinkedList<>();
        if(p==null && q==null)
            return true;
        stack.add(new Pair<TreeNode,TreeNode>(p,q));

        while(!stack.isEmpty()){
            Pair<TreeNode,TreeNode> pair = stack.pollLast();
            TreeNode pNode = pair.getKey();
            TreeNode qNode = pair.getValue();
            if(pNode!=null || qNode!=null){
                if(qNode==null)
                    return false;
                if(pNode==null)
                    return false;
                if(pNode.val!=qNode.val){
                return false;
                }
                stack.add(new Pair<TreeNode,TreeNode>(pNode.left,qNode.left) );
                stack.add(new Pair<TreeNode,TreeNode>(pNode.right,qNode.right));    
            }
        }

        return true;
        
    }
    // recursion
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // p and q are both null
        if (p == null && q == null) return true;
        // one of p and q is null
        if (q == null || p == null) return false;
        if (p.val != q.val) return false;
        return isSameTree(p.right, q.right) && isSameTree(p.left, q.left);
    }

    // invert treee -using bfs queue
    public TreeNode invertTree(TreeNode root) {
        if(root==null)
            return null;
        
        Queue<TreeNode> queue = new LinkedList<>();

        queue.add(root);

        while(!queue.isEmpty()){
            TreeNode current = queue.poll();
            if(current!=null){
            TreeNode temp = current.left;
            current.left = current.right;
            current.right = temp;
            queue.add(current.left);
            queue.add(current.right);}
        }
        return root;  
    }

    // check symmetrix tree
    public boolean isSymmetric(TreeNode root) {
        Queue <TreeNode> queue = new LinkedList<>();

        queue.add(root);
        queue.add(root);

        while(!queue.isEmpty()){
            TreeNode t1 = queue.poll();
            TreeNode t2 = queue.poll();
            if(t1==null && t2==null) continue;
            if(t1==null || t2==null || t1.val!=t2.val) return false;
            queue.add(t1.left);
            queue.add(t2.right);
            queue.add(t1.right);
            queue.add(t2.left);
        }
        return true;
    }

    // create from preorder and inorder
    int preorderIndex;
    Map<Integer, Integer> inorderIndexMap;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        preorderIndex = 0;
        // build a hashmap to store value -> its index relations
        inorderIndexMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderIndexMap.put(inorder[i], i);
        }

        return arrayToTree(preorder, 0, preorder.length - 1);
    }

    private TreeNode arrayToTree(int[] preorder, int left, int right) {
        // if there are no elements to construct the tree
        if (left > right) return null;

        // select the preorder_index element as the root and increment it
        int rootValue = preorder[preorderIndex++];
        TreeNode root = new TreeNode(rootValue);

        // build left and right subtree
        // excluding inorderIndexMap[rootValue] element because it's the root
        root.left = arrayToTree(
            preorder,
            left,
            inorderIndexMap.get(rootValue) - 1
        );
        root.right = arrayToTree(
            preorder,
            inorderIndexMap.get(rootValue) + 1,
            right
        );
        return root;
    }


    // construct tree given postorder and inorder
    private int postorderIndex;
    private HashMap<Integer,Integer> inorderIndexMap = new HashMap<>();

    private TreeNode arrayToTree(int[] postorder, int left, int right){
        if(left>right)
            return null;
        
        int rootValue = postorder[--postorderIndex];
        TreeNode root = new TreeNode(rootValue);
                root.right = arrayToTree(postorder,inorderIndexMap.get(rootValue)+1,right);

        root.left = arrayToTree(postorder,left,inorderIndexMap.get(rootValue)-1);
        return root;
    }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        postorderIndex = postorder.length;
        for(int i=0;i<inorder.length;i++){
            inorderIndexMap.put(inorder[i],i);
        }
        return arrayToTree(postorder,0 ,inorder.length-1);
        
    }

    // connectting right pointer in same level with out space
    public Node connect(Node root) {
        if (root == null) return null;
        
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while(!queue.isEmpty()){
            int size = queue.size();

            for(int i = 0 ; i<size ;i++){
                Node currentNode = queue.poll();

                if(i<size-1){
                    currentNode.next = queue.peek();
                }

                if(currentNode.left!=null){
                    queue.add(currentNode.left);
                }
                if(currentNode.right!=null){
                    queue.add(currentNode.right);
                }
            }
        }
        return root;
    }
    //// connecting the level nodes with pointers without queue using prev level next pointers
    Node prev, leftmost;

    public void processChild(Node childNode) {
        if (childNode != null) {
            // If the "prev" pointer is alread set i.e. if we
            // already found atleast one node on the next level,
            // setup its next pointer
            if (this.prev != null) {
                this.prev.next = childNode;
            } else {
                // Else it means this child node is the first node
                // we have encountered on the next level, so, we
                // set the leftmost pointer
                this.leftmost = childNode;
            }

            this.prev = childNode;
        }
    }
    
    public Node connect(Node root) {
        if (root == null) {
            return root;
        }

        // The root node is the only node on the first level
        // and hence its the leftmost node for that level
        this.leftmost = root;

        // Variable to keep track of leading node on the "current" level
        Node curr = leftmost;

        // We have no idea about the structure of the tree,
        // so, we keep going until we do find the last level.
        // the nodes on the last level won't have any children
        while (this.leftmost != null) {
            // "prev" tracks the latest node on the "next" level
            // while "curr" tracks the latest node on the current
            // level.
            this.prev = null;
            curr = this.leftmost;

            // We reset this so that we can re-assign it to the leftmost
            // node of the next level. Also, if there isn't one, this
            // would help break us out of the outermost loop.
            this.leftmost = null;

            // Iterate on the nodes in the current level using
            // the next pointers already established.
            while (curr != null) {
                // Process both the children and update the prev
                // and leftmost pointers as necessary.
                this.processChild(curr.left);
                this.processChild(curr.right);

                // Move onto the next node.
                curr = curr.next;
            }
        }

        return root;
    }

    // flatten tree using recurssion
    private TreeNode flattenTree(TreeNode node){
        if(node==null)
            return null;

        if(node.left==null&&node.right==null)
            return node;

        TreeNode leftTail = this.flattenTree(node.left);

        TreeNode rightTail = this.flattenTree(node.right);

         if (leftTail != null) {
            leftTail.right = node.right;
            node.right = node.left;
            node.left = null;
        }

        
        return rightTail == null ? leftTail : rightTail;

    }
    public void flatten(TreeNode root) {
        this.flattenTree(root);
    }
}